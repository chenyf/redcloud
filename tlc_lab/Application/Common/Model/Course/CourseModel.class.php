<?php

namespace Common\Model\Course;

use Common\Traits\DaoModelTrait;
use Think\Model;
use Common\Model\Common\BaseModel;

class CourseModel extends BaseModel {

    use DaoModelTrait;

    protected $tableName = "course";

    //根据课程发布者ID获取所有课程
    public function getUserCourseId($userId) {
        $where['userId'] = $userId;
        return $this->where($where)->field('id')->select();
    }

    //查询所有的课程
    public function selectAllCourseList(){
        return $this->select() ?: array();
    }

    //事务执行插入语句
    public function execQuery($sqlList){
        $this->getConnection()->beginTransaction();
        try {
            foreach ($sqlList as $sql){
                $this->getConnection()->executeQuery($sql,null);
                doLog("execute query:");
                doLog($sql);
            }

            $this->getConnection()->commit();
            return null;
        } catch (\Exception $e) {
            $this->getConnection()->rollback();
            return $e->getMessage();
        }
    }

    public function getMaxId(){
        $course = $this->order("id desc")->limit(0, 1)->find() ?: null;
        return empty($course) ? 0 : $course["id"];
    }

    public function getLastInsID()
    {
        return parent::getLastInsID(); // TODO: Change the autogenerated stub
    }

    public function addCourse($course) {
        $r = $this->add($course);
        if (!$r)
            $this->createDaoException('Insert course error.');
        return $this->getCourse($r);
    }

    //author tanhaitao  2015-09-22  课程图片上传处显示调用，其他请用getCourse()
    public function getCourseFind($id) {
        return $this->where("id = {$id}")->find() ? : null;
    }

    //author tanhaitao  2015-09-22  课程图片上传处显示调用，其他请用 updateCourse()
    public function updateCourseFind($id, $fields) {
        $this->where(array('id' => $id))->save($fields);
        return $this->getCourseFind($id);
    }

    public function getCourse($id) {
        $r = $this->where("id = {$id}")->find();
        return decorateCoursePicture($r) ? : null;
    }

    /**
     * 获取当前站的所有课程
     * @author fubaosheng 2015-11-27
     */
    public function getCurrentWebAllCourse($start, $limit, $onlyPublished = true) {
        $where = " 1=1 ";
        if ($onlyPublished === 'draft') {
            $where .= " AND status = 'draft' ";
        } elseif ($onlyPublished === true) {
            $where .= " AND status = 'published' ";
        } elseif ($onlyPublished === "unpublished") {
            $where .= " AND status != 'published' ";
        }
        $model = $this;
        $r = $model->where($where)->order("createdTime desc")->limit($start, $limit)->select();
        return decorateCoursePicList($r) ? : array();
    }

    public function getCourseByCategoryId($categoryId) {

        $courseIds = $this->createService('Course.CourseCategoryRelServiceModel')->getCourseIdsByCid($categoryId);
        if ($courseIds) {
            $sCourseId = join(',', $courseIds);
            $map['id'] = array('in', $sCourseId);
        } else {
            $map['id'] = array('in', array(0));
        }
        $r = $this->field("id,title,subtitle,status,type,lessonNum,selectPicture,smallPicture,middlePicture,largePicture,studentNum,appleForbid,rating score,teacherIds,price")->where($map)->select();
        return decorateCoursePicList($r) ? : array();
    }

    public function updateCourse($id, $fields) {
        $this->where(array('id' => $id))->save($fields);
        return $this->getCourse($id);
    }

    public function updatePrice($fields, $id) {
        $this->where(array('id' => $id))->save($fields);
    }

    public function waveCourse($id, $field, $diff) {
        $fields = array('hitNum');
        if (!in_array($field, $fields)) {
            E(sprintf("%s字段不允许增减，只有%s才被允许增减", $field, implode(',', $fields)));
        }
        return $this->where(" id= {$id}")->save(array($field => $field + $diff));
//        $sql = "UPDATE {$this->getTablename()} SET {$field} = {$field} + ? WHERE id = ? LIMIT 1";
//        return $this->getConnection()->executeQuery($sql, array($diff, $id));
    }

    public function deleteCourse($id) {
        return $this->where("id = {$id}")->delete();
//        return $this->getConnection()->delete(self::TABLENAME, array('id' => $id));
    }

    public function getCoursesCount($status = false) {
        $where = "1 = 1";
        if ($status === "published")
            $where.= " and status = 'published' ";
        if ($status === "unpublished")
            $where.= " and status != 'published' ";
        return $this->where($where)->count() ? : null;
    }

    /**
     * @author fubaosheng 2015-11-27 
     * 中心库不忽略webCode
     */
    public function getCurrentWebCourseCount($status = false) {
        $where = " 1 = 1 ";
        if ($status === "published")
            $where.= " and status = 'published' ";
        if ($status === "unpublished")
            $where.= " and status != 'published' ";
        return $this->where($where)->count() ? : 0;
    }

    /**
     * $ids array  课程id
     * $findInSet bool 固定排序 Yao 2016/3/7
     * @return array
     */
    public function findCoursesByIds(array $ids, $findInSet = false) {
        if (empty($ids))
            return array();
        $str = implode(',', $ids);
        #放开webcode由上层控制, qzw 2015-08-06
        if ($findInSet)
            $r = $this->where("id in({$str})")->order("find_in_set(id,'{$str}')")->select();
        else
            $r = $this->where("id in({$str})")->select();
        return decorateCoursePicList($r);
    }

    public function findCoursesByCourseIds(array $ids, $start, $limit) {
        if (empty($ids))
            return array();
        $str = implode(',', $ids);
        $r = $this->where(" id in({$str}) ")->limit($start, $limit)->select();
        return decorateCoursePicList($r);
    }

    public function findCoursesByLikeTitle($title) {
        if (empty($title))
            return array();
        $r = $this->where("title like '%{$title}%' ")->select();
        return decorateCoursePicList($r);
    }

    public function findCoursesByTagIdsAndStatus(array $tagIds, $status, $start, $limit) {
        $where = "status = '{$status}'";
        foreach ($tagIds as $tagId) {
            $where .= " AND tags LIKE '%|$tagId|%'";
        }
        $r = $this->where($where)->order("createdTime desc")->limit($start, $limit)->select();
        return decorateCoursePicList($r);
    }

    public function findCoursesByAnyTagIdsAndStatus(array $tagIds, $status, $orderBy, $start, $limit) {
        if (empty($tagIds))
            return array();
        $where = " status = '{$status}' and ";
        foreach ($tagIds as $key => $tagId) {
            if ($key > 0)
                $where.= "OR tags LIKE '%|$tagId|%'";
            else
                $where.= " tags LIKE '%|$tagId|%' ";
        }
        $r = $this->where($where)->order("{$orderBy[0]} {$orderBy[1]}")->limit($start, $limit)->select();
        return decorateCoursePicList($r);
    }

    public function searchCourses($conditions, $orderBy, $start, $limit) {
        $this->filterStartLimit($start, $limit);
        $builder = $this->_createSearchQueryBuilder($conditions);

        $builder = $builder
                ->select('*')
                ->orderBy($orderBy[0], $orderBy[1])
                ->setFirstResult($start)
                ->setMaxResults($limit);
        if ($orderBy[0] == 'recommendedSeq') {
            $builder->addOrderBy('recommendedTime', 'DESC');
        }
        $r = $builder->execute()->fetchAll();
        return decorateCoursePicList($r) ? : array();
    }

    public function searchCourseCount($conditions) {

        $builder = $this->_createSearchQueryBuilder($conditions);
        $builder = $builder->select('COUNT(id)');
        return $builder->execute()->fetchColumn(0);
    }

    //SELECT * FROM course course WHERE (status = :status) AND (type = :type) AND (id IN (144,145,146,156,157,146,146,146,146,146,146,158,158,159,172,173,174,175,176,177,178)) ORDER BY createdTime DESC LIMIT 20
    public function searchPublicCourse($conditions) {
        $builder = $this->_createSearchQueryBuilder($conditions);
        $builder = $builder->select('*');
        $r = $builder->execute()->fetchAll();
        return decorateCoursePicList($r) ? : array();
    }

    public function findCoursesCountByLessThanCreatedTime($endTime, $siteSelect = 'local') {
        $builder = $this;
        if (!empty($siteSelect) && $siteSelect != 'local') {
            $builder = processSqlObj(array('sqlObj' => $builder, 'siteSelect' => $siteSelect));
        }
        return $builder->where("createdTime <= {$endTime}")->count("id");
//        $sql="SELECT count(id) as count FROM `{$this->getTablename()}` WHERE `createdTime`<={$endTime} ";
//        return $this->getConnection()->fetchColumn($sql);
    }

    public function analysisCourseSumByTime($endTime) {
        $sql1 = "SELECT count(id) as count FROM  `{$this->tableName}`   i   WHERE   i.createdTime<=o.createdTime";
        $sql2 = "SELECT from_unixtime(o.createdTime,'%Y-%m-%d') as date,( {$sql1}  )  as Count from `{$this->tableName}`  o  where o.createdTime<={$endTime} order by 1,2";
        $sql = "SELECT date , max(a.Count) as count from ({$sql2}) as a group by date ";
        $query = mysql_query($sql);
        if ($query) {
            $temp = array();
            while ($res = mysql_fetch_assoc($query)) {
                $temp[] = $res;
            }
            return $temp; //定义一个空数组用于存储接收到的数据
        } else {
            return array();
        }
        //return $this->getConnection()->fetchAll($sql);
    }

    private function _createSearchQueryBuilder($conditions) {
        if (isset($conditions['title'])) {
            $conditions['titleLike'] = "%{$conditions['title']}%";
            unset($conditions['title']);
        }

        if (isset($conditions['tagId'])) {
            $tagId = (int) $conditions['tagId'];
            if (!empty($tagId)) {
                $conditions['tagsLike'] = "%|{$conditions['tagId']}|%";
            }
            unset($conditions['tagId']);
        }

        if (isset($conditions['tagIds'])) {
            $tagIds = $conditions['tagIds'];
            $conditions['tagsLike'] = '%|';
            if (!empty($tagIds)) {
                foreach ($tagIds as $tagId) {
                    $conditions['tagsLike'] .= "{$tagId}|";
                }
            }
            $conditions['tagsLike'] .= '%';
            unset($conditions['tagIds']);
        }

        $builder = $this->createDynamicQueryBuilder($conditions)
                ->from('course', 'course')
                ->andWhere('status = :status')
                ->andWhere('type = :type')
                ->andWhere('number = :number')
                ->andWhere('title LIKE :titleLike')
                ->andWhere('userId = :userId')
                ->andWhere('recommended = :recommended')
                ->andWhere('tags LIKE :tagsLike')
                ->andWhere('startTime >= :startTimeGreaterThan')
                ->andWhere('startTime < :startTimeLessThan')
                ->andWhere('createdTime >= :startTime')
                ->andWhere('createdTime <= :endTime')
                ->andWhere('categoryId = :categoryId')
                ->andWhere('smallPicture = :smallPicture');

        if (isset($conditions['categoryId']) && !empty($conditions['categoryId'])) {
//            $courseIds = $this->createService('Course.CourseCategoryRelServiceModel')->getCourseIdsByCid($conditions['categoryId']);
//            if ($courseIds) {
//                $sCourseId = join(',', $courseIds);
//                $builder->andStaticWhere("id IN ($sCourseId)");
//            } else {
//                $builder->andStaticWhere("id IN (0)");
//            }
            if ($conditions['categoryId']) {
                $scateId = join(',', $conditions['categoryId']);
                $builder->andStaticWhere("categoryId IN ($scateId)");
            } else {
                $builder->andStaticWhere("categoryId IN (0)");
            }

        } else if (isset($conditions['categoryIds']) && !empty($conditions['categoryIds'])) {
//            $courseIds = $this->createService('Course.CourseCategoryRelServiceModel')->getCourseIdsByCid($conditions['categoryIds']);
//
//            if ($courseIds) {
//                $sCourseId = join(',', $courseIds);
//                $builder->andStaticWhere("id IN ($sCourseId)");
//            } else {
//                $builder->andStaticWhere("id IN (0)");
//            }

            if ($conditions['categoryIds']) {
                $scateId = join(',', $conditions['categoryIds']);
                $builder->andStaticWhere("categoryId IN ($scateId)");
            } else {
                $builder->andStaticWhere("categoryId IN (0)");
            }
        } else {
            if (!isset($conditions['ignoreCid'])) {
//                if ($conditions['public'] == 1)
//                    $courseIds = $this->createService('Course.CourseCategoryRelServiceModel')->getCourseIdsByCid();
//                else
//                    $courseIds = $this->createService('Course.CourseCategoryRelServiceModel')->getCourseIdsByCid();
//                if ($courseIds) {
//                    $sCourseId = join(',', $courseIds);
//                    $builder->andStaticWhere("id IN ($sCourseId)");
//                } else {
//                    $builder->andStaticWhere("id IN (0)");
//                }

                $builder->andStaticWhere("categoryId >= 0");
            }
        }

        if (isset($conditions['courseIds'])) {

            $courseIds = $conditions['courseIds'];

            if (!empty($courseIds)) {
                $courseIds = join(',', $courseIds);
            }elseif(count($courseIds) == 0){
                $courseIds = 0;
            }

            $builder->andStaticWhere("id IN ($courseIds)");
        }

        return $builder;
    }

    public function analysisCourseDataByTime($startTime, $endTime) {
        return $this->field("count(id) as count,from_unixtime(createdTime,'%Y-%m-%d') as date")->where("createdTime >= {$startTime} and createdTime <= {$endTime}")->group("from_unixtime(`createdTime`,'%Y-%m-%d')")->order("date asc")->select();
//        $sql="SELECT count( id) as count, from_unixtime(createdTime,'%Y-%m-%d') as date FROM `{$this->getTablename()}` WHERE  `createdTime`>={$startTime} and `createdTime`<={$endTime} group by from_unixtime(`createdTime`,'%Y-%m-%d') order by date ASC ";
//        return $this->getConnection()->fetchAll($sql);
    }

    public function getLessonByCourseIdAndNumber($courseId, $number) {
        $r = $this->where("courseId = {$courseId} and number = {$number}")->select();
        return decorateCoursePicList($r)? : null;
//        $sql = "SELECT * FROM {$this->getTablename()} WHERE courseId = ? AND number = ? LIMIT 1";
//        return $this->getConnection()->fetchAll($sql, array($courseId, $number)) ? : null;
    }

    public function updateCoinPrice($cashRate) {
        return $this->where("coinPrice = 0")->save(array('coinPrice' => 'price*' . $cashRate));
//        $sql="UPDATE `{$this->getTablename()}` SET coinPrice = price*? WHERE coinPrice=0 ;";
//        $this->getConnection()->executeUpdate($sql, array($cashRate));
    }

    /**
     * 获取课程信息
     * @param        $id
     * @return array
     * @author tanhaitao 2015-11-6  
     */
    public function findCourseIntro($id) {
        $r = $this
                ->field('id courseId,title,about info,selectPicture,middlePicture pic,rating score,teacherIds teacherid,categoryId, studentNum studNum,webCode,lessonNum,price,chatRoomStatus')
                ->where(array('id' => $id))
                ->find();
        return $r ? : array();
    }

    public function findGoldBuyCourseIntro($id) {
        $r = $this
                ->field('id courseId,title, selectPicture,middlePicture pic,subtitle, studentNum studyNum,lessonNum,price,lessonNum')
                ->where(array('id' => $id))
                ->find();
        return $r ? : array();
    }

    public function getCourseNum($data) {
        return $this->where($data)->count();
    }

    public function getCourseData($where, $start, $end) {
        $arr = $this->field("id,title")->where($where)->limit($start, $end)->select();
        return $arr;
    }

    public function selectCoursesByCategory($categoryId){
        $map['categoryId']  =  $categoryId ;
        return $this->where($map)->select() ? : array();
    }

    /**
     * 根据分类的courseCode获取所有的课程编号
     *
     */
    public function getAllCourseNumber($courseCodePrefix=""){
        if($courseCodePrefix=""){
            return $this->field("DISTINCT number")->where("status = 'published'")->order('number ASC')->select() ? : array();
        }
        return $this->field("DISTINCT number")->where("status = 'published' and number like '{$courseCodePrefix}%'")->order('number ASC')->select() ? : array();
    }
}

?>